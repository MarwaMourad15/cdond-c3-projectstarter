version: 2.1

commands:
  # destroy_env:
  #   steps:
  #     - run:
  #         name: Destroy Env
  #         when: on_fail
  #         command: |
  #           aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  #           aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #           aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # sudo apt -y update 
            # sudo apt-get install -f
            # sudo apt-get update  --fix-missing
            # sudo apt-get update 
            # #sudo apt-get install awscli
            # #sudo  install  awscli
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # sudo apt-get install -y zip unzip
            # sudo unzip awscliv2.zip 
            # sudo ./aws/install 
            # sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  install_awscli:
    description: Install aws cli v2
    steps:
      - run: 
          name: Install aws cli 
          command: |
              # yum -y update 
              # yum install -f
              # yum update  --fix-missing
              # yum update 
              # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              # yum install -y zip unzip
              # unzip awscliv2.zip 
              # ./aws/install 
              # ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
              sudo apt -y update 
              sudo apt-get install -f
              sudo apt-get update  --fix-missing
              sudo apt-get update 
              #sudo apt-get install awscli
              #sudo  install  awscli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get install -y zip unzip
              sudo unzip awscliv2.zip 
              sudo ./aws/install 
              sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

  install_ansible:
    description: install ansible 
    steps:
      - run: 
          name: install ansible 
          command: |
              sudo apt update 
              #sudo apt install software-properties-common -y 
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              #sudo apt -y update && apt install -y python3
              sudo apt install -y python3
              sudo apt install -y ansible 
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( ${SUCCESS} == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            else
              echo "can not revert DB"
            fi

  install_nodejs:
    description: Install Node.js
    steps:
      - run:
          name: Install Node.js
          command: |
            sudo apt -y update 
            sudo apt-get install -f
            sudo apt-get update  --fix-missing
            sudo apt-get update 
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0   
            # curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            # sudo apt-get install -y nodejs
            # sudo npm install -g n
            # sudo n 13.8.0
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan Frontend Dependancies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend Dependancies
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run : 
          name: yum install -y tar gzip
          command: |
              yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
      # Docker image here that supports Ansible
      #- image: ansible/centos7-ansible 
    steps:
      - checkout
      - install_ansible
      #- install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e5:c2:35:98:b6:93:92:98:e4:d4:3e:b0:18:74:32:21"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

            echo ${CIRCLE_WORKFLOW_ID:0:7}
            curl https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            
            # cd backend
            # npm install 
            # #npm audit fix
            # #npm audit fix --force
            # npm run build
            # npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "migrated"
              #curl -d '1' https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "can not migrate"
             # exit 1
            fi      
      - revert-migrations
      - destroy-environment
  
  deploy-frontend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          key: frontend-build
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - revert-migrations
      # - destroy-environment    
                    
  deploy-backend:
    docker:
      # The authenticity of host can't be established
      #- image: cimg/node:13.8.0
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["e5:c2:35:98:b6:93:92:98:e4:d4:3e:b0:18:74:32:21"] 
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend and Deploy
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            

            # # Zip the directory
            # # tar -C backend -czvf artifact.tar.gz .
            # cd backend
            # npm run build
            # tar -czf artifact.tar.gz dist/* package*
            # cd ..
            # # mkdir .circleci/ansible/roles/deploy/files
            # cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files/
            # # cd .circleci/ansible/roles/deploy/files/
            # # ls
            # # cd ..
            # cd .circleci/ansible
            # echo "Contents  of the inventory.txt file is -------"
            # cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml 
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl
            sudo apt install net-tools
      - run:
          name: Get backend url and Backend smoke test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL=http://${BACKEND_IP}:3030
            echo "${BACKEND_IP}"
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 1 
              else
                exit 1
              fi 
      - destroy-environment
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/old_workflow_id -d "${OLD_WORKFLOW_ID}"
        
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"         

            export OldWorkflowID=$(curl --insecure https://kvdb.io/Kc57GatLmLMy6wx43mtGBu/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID

            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "-------------- deleted Confirmed ----------------" 
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            else
              echo "-------------- cannot clean up -------------- "
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]